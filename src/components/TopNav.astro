---
import SearchBar from './SearchBar.astro';
import ResetConfirmationModal from './ResetConfirmationModal.astro';
import { getAllQuestions } from '../utils/questions';
import { parseQuestionId, createCategoryMenu, groupQuestionsByCategory } from '../utils/questionIdParser';
import type { Category } from '../types/categories';
import categoriesData from '../data/categories.json';
import StatsContainer from './StatsContainer.jsx';

interface Props {
  questions?: Record<string, any>[];
}

// Get the questions from props
const { questions = [] } = Astro.props;

// Get all questions and organize them by category
const allQuestions = getAllQuestions();
const categories = categoriesData as Category[];
const questionGroups = groupQuestionsByCategory(allQuestions, categories);
const categoryMenu = createCategoryMenu(categories, questionGroups);
---

<!-- Mobile TopNav - Visible only on mobile devices -->
<nav class="bg-white shadow-md mb-4 rounded-lg md:hidden">
  <div class="max-w-4xl mx-auto px-6 py-2">
    <!-- Title and Mobile Menu Button Row -->
    <div class="flex items-center justify-between">
      <div class="flex-none"></div> <!-- Smaller spacer on mobile -->
      <div class="text-center flex-auto">
        <a href="/" class="text-xl font-bold text-red-600 inline-block whitespace-nowrap">Amateur Radio Exam Prep</a>
      </div>
      <!-- Mobile menu button -->
      <div class="flex-none flex justify-end">
        <button id="mobileMenuToggle" class="p-1 rounded-md text-gray-600 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Stats Container - Always visible on mobile -->
    <div class="w-full">
      <StatsContainer client:load isMobile={true} />
    </div>

    <!-- Mobile Navigation items - hidden unless toggled -->
    <div id="mobileMenu" class="hidden pt-3">
      <!-- Search Bar -->
      <div class="relative w-full mb-3">
        <SearchBar />
      </div>

      <!-- Question Selector Dropdown -->
      <div class="relative w-full">
        <button id="mobileQuestionDropdownButton" class="w-full flex items-center justify-center px-4 py-2 text-sm text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-colors">
          <span>Select Question</span>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </button>

        <div id="mobileQuestionDropdown" class="hidden absolute z-10 mt-1 w-full bg-white rounded-lg shadow-md max-h-80 overflow-y-auto border border-gray-200">
          <ul id="mobileCategoryList" class="py-1 text-xs text-gray-700">
            {categoryMenu.map((category) => (
              <li class="mobile-category-item">
                <div class="px-3 py-1.5 font-medium bg-gray-50 hover:bg-gray-100 cursor-pointer flex justify-between items-center rounded-md my-1" data-category={category.code}>
                  <span>{category.title}</span>
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mobile-category-icon" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                  </svg>
                </div>
                <ul class="mobile-subcategory-list hidden pl-2">
                  {category.subcategories.map((subcategory) => (
                    <li class="mobile-subcategory-item">
                      <div class="px-3 py-1.5 hover:bg-gray-100 cursor-pointer flex justify-between items-center rounded-md my-1" data-category={category.code} data-subcategory={subcategory.code}>
                        <span>{subcategory.title}</span>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mobile-subcategory-icon" viewBox="0 0 20 20" fill="currentColor">
                          <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                      </div>
                      <ul class="mobile-question-list hidden pl-3">
                        {subcategory.questions.map((questionId) => (
                          <li class="px-3 py-1.5 hover:bg-gray-100 cursor-pointer mobile-question-item text-xs rounded-md my-1 mx-1" data-id={questionId}>
                            {questionId}
                          </li>
                        ))}
                      </ul>
                    </li>
                  ))}
                </ul>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  </div>
</nav>

<!-- Desktop TopNav - Visible only on desktop devices -->
<nav class="hidden md:block bg-white shadow-md mb-4 rounded-lg">
  <div class="max-w-4xl mx-auto px-6 py-4">
    <!-- Desktop Header with Title and Stats -->
    <div class="flex items-center justify-between mb-4">
      <!-- Title -->
      <div class="flex-1">
        <a href="/" class="text-xl font-bold text-red-600">Amateur Radio Exam Prep</a>
      </div>

      <!-- Stats Container -->
      <div class="flex-1 flex justify-end">
        <StatsContainer client:load isMobile={false} />
      </div>
    </div>

    <!-- Desktop Navigation Row -->
    <div class="flex flex-row justify-between items-center space-x-4">
      <!-- Search Bar -->
      <div class="relative w-1/3">
        <SearchBar />
      </div>

      <!-- Question Selector Dropdown -->
      <div class="relative w-auto">
        <button id="desktopQuestionDropdownButton" class="w-auto flex items-center justify-center px-4 py-2 text-sm text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-colors">
          <span>Select Question</span>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </button>

        <div id="desktopQuestionDropdown" class="hidden absolute z-10 mt-1 w-64 bg-white rounded-lg shadow-md max-h-80 overflow-y-auto border border-gray-200">
          <ul id="desktopCategoryList" class="py-1 text-xs text-gray-700">
            {categoryMenu.map((category) => (
              <li class="desktop-category-item">
                <div class="px-3 py-1.5 font-medium bg-gray-50 hover:bg-gray-100 cursor-pointer flex justify-between items-center rounded-md my-1" data-category={category.code}>
                  <span>{category.title}</span>
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 desktop-category-icon" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                  </svg>
                </div>
                <ul class="desktop-subcategory-list hidden pl-2">
                  {category.subcategories.map((subcategory) => (
                    <li class="desktop-subcategory-item">
                      <div class="px-3 py-1.5 hover:bg-gray-100 cursor-pointer flex justify-between items-center rounded-md my-1" data-category={category.code} data-subcategory={subcategory.code}>
                        <span>{subcategory.title}</span>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 desktop-subcategory-icon" viewBox="0 0 20 20" fill="currentColor">
                          <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                      </div>
                      <ul class="desktop-question-list hidden pl-3">
                        {subcategory.questions.map((questionId) => (
                          <li class="px-3 py-1.5 hover:bg-gray-100 cursor-pointer desktop-question-item text-xs rounded-md my-1 mx-1" data-id={questionId}>
                            {questionId}
                          </li>
                        ))}
                      </ul>
                    </li>
                  ))}
                </ul>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  </div>
</nav>

<ResetConfirmationModal />

<script>
  import useQuizStore from '../stores/quizStore';

  // Client-side JavaScript for interactivity
  document.addEventListener('DOMContentLoaded', () => {
    // Mobile menu toggle
    const mobileMenuToggle = document.getElementById('mobileMenuToggle');
    const mobileMenu = document.getElementById('mobileMenu');

    mobileMenuToggle?.addEventListener('click', () => {
      mobileMenu?.classList.toggle('hidden');
    });

    // Mobile Question dropdown toggle
    const mobileQuestionDropdownButton = document.getElementById('mobileQuestionDropdownButton');
    const mobileQuestionDropdown = document.getElementById('mobileQuestionDropdown');

    mobileQuestionDropdownButton?.addEventListener('click', () => {
      mobileQuestionDropdown?.classList.toggle('hidden');
    });

    // Desktop Question dropdown toggle
    const desktopQuestionDropdownButton = document.getElementById('desktopQuestionDropdownButton');
    const desktopQuestionDropdown = document.getElementById('desktopQuestionDropdown');

    desktopQuestionDropdownButton?.addEventListener('click', () => {
      desktopQuestionDropdown?.classList.toggle('hidden');
    });

    // Close dropdowns when clicking outside
    document.addEventListener('click', (event) => {
      // Mobile dropdown
      if (mobileQuestionDropdownButton && mobileQuestionDropdown && 
          !mobileQuestionDropdownButton.contains(event.target as Node) && 
          !mobileQuestionDropdown.contains(event.target as Node)) {
        mobileQuestionDropdown.classList.add('hidden');
      }

      // Desktop dropdown
      if (desktopQuestionDropdownButton && desktopQuestionDropdown && 
          !desktopQuestionDropdownButton.contains(event.target as Node) && 
          !desktopQuestionDropdown.contains(event.target as Node)) {
        desktopQuestionDropdown.classList.add('hidden');
      }
    });

    // Handle mobile category toggle
    const mobileCategoryItems = document.querySelectorAll('.mobile-category-item > div');
    mobileCategoryItems.forEach(item => {
      item.addEventListener('click', (e) => {
        e.stopPropagation();
        const categoryItem = item.closest('.mobile-category-item');
        const subcategoryList = categoryItem?.querySelector('.mobile-subcategory-list');
        const categoryIcon = item.querySelector('.mobile-category-icon');

        // Toggle the subcategory list
        subcategoryList?.classList.toggle('hidden');

        // Rotate the icon when expanded
        if (categoryIcon) {
          categoryIcon.classList.toggle('transform');
          categoryIcon.classList.toggle('rotate-180');
        }
      });
    });

    // Handle desktop category toggle
    const desktopCategoryItems = document.querySelectorAll('.desktop-category-item > div');
    desktopCategoryItems.forEach(item => {
      item.addEventListener('click', (e) => {
        e.stopPropagation();
        const categoryItem = item.closest('.desktop-category-item');
        const subcategoryList = categoryItem?.querySelector('.desktop-subcategory-list');
        const categoryIcon = item.querySelector('.desktop-category-icon');

        // Toggle the subcategory list
        subcategoryList?.classList.toggle('hidden');

        // Rotate the icon when expanded
        if (categoryIcon) {
          categoryIcon.classList.toggle('transform');
          categoryIcon.classList.toggle('rotate-180');
        }
      });
    });

    // Handle mobile subcategory toggle
    const mobileSubcategoryItems = document.querySelectorAll('.mobile-subcategory-item > div');
    mobileSubcategoryItems.forEach(item => {
      item.addEventListener('click', (e) => {
        e.stopPropagation();
        const subcategoryItem = item.closest('.mobile-subcategory-item');
        const questionList = subcategoryItem?.querySelector('.mobile-question-list');
        const subcategoryIcon = item.querySelector('.mobile-subcategory-icon');

        // Toggle the question list
        questionList?.classList.toggle('hidden');

        // Rotate the icon when expanded
        if (subcategoryIcon) {
          subcategoryIcon.classList.toggle('transform');
          subcategoryIcon.classList.toggle('rotate-180');
        }
      });
    });

    // Handle desktop subcategory toggle
    const desktopSubcategoryItems = document.querySelectorAll('.desktop-subcategory-item > div');
    desktopSubcategoryItems.forEach(item => {
      item.addEventListener('click', (e) => {
        e.stopPropagation();
        const subcategoryItem = item.closest('.desktop-subcategory-item');
        const questionList = subcategoryItem?.querySelector('.desktop-question-list');
        const subcategoryIcon = item.querySelector('.desktop-subcategory-icon');

        // Toggle the question list
        questionList?.classList.toggle('hidden');

        // Rotate the icon when expanded
        if (subcategoryIcon) {
          subcategoryIcon.classList.toggle('transform');
          subcategoryIcon.classList.toggle('rotate-180');
        }
      });
    });

    // Handle question selection (both mobile and desktop)
    const allQuestionItems = document.querySelectorAll('.mobile-question-item, .desktop-question-item');
    allQuestionItems.forEach(item => {
      item.addEventListener('click', () => {
        const questionId = item.getAttribute('data-id');
        if (questionId) {
          // Navigate to the selected question
          window.location.href = `/quiz/${questionId}`;
        }
      });
    });

    // Search functionality
    const searchInputs = document.querySelectorAll('input[type="search"]');
    searchInputs.forEach(searchInput => {
      searchInput.addEventListener('input', () => {
        const searchTerm = searchInput.value.toLowerCase();
        const questionItems = document.querySelectorAll('.mobile-question-item, .desktop-question-item');

        questionItems.forEach(item => {
          const text = item.textContent?.toLowerCase() || '';
          if (text.includes(searchTerm)) {
            item.classList.remove('hidden');
          } else {
            item.classList.add('hidden');
          }
        });
      });
    });

    // Reset confirmation modal is now handled by the StatsContainer component

    // Confirm reset button in the modal
    const confirmReset = document.getElementById('confirmReset');
    confirmReset?.addEventListener('click', () => {
      // Use the resetProgress action from the quiz store
      const { resetProgress } = useQuizStore.getState();
      resetProgress();

      // For backward compatibility
      localStorage.setItem('questionsAttempted', '0');
      localStorage.setItem('questionsCorrect', '0');

      // Hide the modal after resetting
      const resetConfirmationModal = document.getElementById('resetConfirmationModal');
      resetConfirmationModal?.classList.add('hidden');
    });

    // Subscriptions are now handled by the StatsContainer component
  });
</script>
