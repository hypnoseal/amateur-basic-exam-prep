---
import SearchBar from './SearchBar.astro';
import ResetConfirmationModal from './ResetConfirmationModal.astro';
import { getAllQuestions } from '../utils/questions';
import { parseQuestionId, createCategoryMenu, groupQuestionsByCategory } from '../utils/questionIdParser';
import type { Category } from '../types/categories';
import categoriesData from '../data/categories.json';

interface Props {
  questions?: Record<string, any>[];
}

// Get the questions from props
const { questions = [] } = Astro.props;

// Get all questions and organize them by category
const allQuestions = getAllQuestions();
const categories = categoriesData as Category[];
const questionGroups = groupQuestionsByCategory(allQuestions, categories);
const categoryMenu = createCategoryMenu(categories, questionGroups);
---

<!-- Mobile TopNav - Visible only on mobile devices -->
<nav class="bg-white shadow-md mb-4 rounded-lg md:hidden">
  <div class="max-w-4xl mx-auto px-6 py-2">
    <!-- Title and Mobile Menu Button Row -->
    <div class="flex items-center justify-between">
      <div class="flex-none"></div> <!-- Smaller spacer on mobile -->
      <div class="text-center flex-auto">
        <a href="/" class="text-xl font-bold text-red-600 inline-block whitespace-nowrap">Amateur Radio Exam Prep</a>
      </div>
      <!-- Mobile menu button -->
      <div class="flex-none flex justify-end">
        <button id="mobileMenuToggle" class="p-1 rounded-md text-gray-600 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Stats Container - Always visible on mobile -->
    <div class="w-full">
      <!-- Combined User Status and Statistics -->
      <div class="bg-white px-1 py-1 rounded-lg text-[10px] flex flex-nowrap justify-between items-center gap-1">
        <!-- Stats divs float left -->
        <div class="flex items-center gap-1">
          <div class="flex items-center bg-blue-50 px-1 py-1 rounded-md">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-2.5 w-2.5 text-blue-500 mr-0.5" viewBox="0 0 20 20" fill="currentColor">
              <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
              <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
            </svg>
            <span class="font-medium mr-0.5 text-blue-700">Attempted:</span>
            <span id="mobileQuestionsAttempted" class="font-bold text-blue-600">0</span>
          </div>
          <div class="flex items-center bg-green-50 px-1 py-1 rounded-md">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-2.5 w-2.5 text-green-500 mr-0.5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
            </svg>
            <span class="font-medium mr-0.5 text-green-700">Correct:</span>
            <span id="mobileQuestionsCorrect" class="font-bold text-green-600">0</span>
          </div>
        </div>

        <!-- Buttons float right -->
        <div class="flex space-x-1">
          <a href="/statistics" class="flex items-center px-2 py-1 text-[10px] text-white bg-indigo-600 hover:bg-indigo-700 rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-2.5 w-2.5 mr-0.5" viewBox="0 0 20 20" fill="currentColor">
              <path d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z" />
            </svg>
            Stats
          </a>
          <button id="mobileResetProgress" class="flex items-center px-2 py-1 text-[10px] text-white bg-red-500 hover:bg-red-600 rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-2.5 w-2.5 mr-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            Reset
          </button>
        </div>
      </div>
    </div>

    <!-- Mobile Navigation items - hidden unless toggled -->
    <div id="mobileMenu" class="hidden pt-3">
      <!-- Search Bar -->
      <div class="relative w-full mb-3">
        <SearchBar />
      </div>

      <!-- Question Selector Dropdown -->
      <div class="relative w-full">
        <button id="mobileQuestionDropdownButton" class="w-full flex items-center justify-center px-4 py-2 text-sm text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-colors">
          <span>Select Question</span>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </button>

        <div id="mobileQuestionDropdown" class="hidden absolute z-10 mt-1 w-full bg-white rounded-lg shadow-md max-h-80 overflow-y-auto border border-gray-200">
          <ul id="mobileCategoryList" class="py-1 text-xs text-gray-700">
            {categoryMenu.map((category) => (
              <li class="mobile-category-item">
                <div class="px-3 py-1.5 font-medium bg-gray-50 hover:bg-gray-100 cursor-pointer flex justify-between items-center rounded-md my-1" data-category={category.code}>
                  <span>{category.title}</span>
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mobile-category-icon" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                  </svg>
                </div>
                <ul class="mobile-subcategory-list hidden pl-2">
                  {category.subcategories.map((subcategory) => (
                    <li class="mobile-subcategory-item">
                      <div class="px-3 py-1.5 hover:bg-gray-100 cursor-pointer flex justify-between items-center rounded-md my-1" data-category={category.code} data-subcategory={subcategory.code}>
                        <span>{subcategory.title}</span>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mobile-subcategory-icon" viewBox="0 0 20 20" fill="currentColor">
                          <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                      </div>
                      <ul class="mobile-question-list hidden pl-3">
                        {subcategory.questions.map((questionId) => (
                          <li class="px-3 py-1.5 hover:bg-gray-100 cursor-pointer mobile-question-item text-xs rounded-md my-1 mx-1" data-id={questionId}>
                            {questionId}
                          </li>
                        ))}
                      </ul>
                    </li>
                  ))}
                </ul>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  </div>
</nav>

<!-- Desktop TopNav - Visible only on desktop devices -->
<nav class="hidden md:block bg-white shadow-md mb-4 rounded-lg">
  <div class="max-w-4xl mx-auto px-6 py-4">
    <!-- Desktop Header with Title and Stats -->
    <div class="flex items-center justify-between mb-4">
      <!-- Title -->
      <div class="flex-1">
        <a href="/" class="text-xl font-bold text-red-600">Amateur Radio Exam Prep</a>
      </div>

      <!-- Stats Container -->
      <div class="flex-1 flex justify-end">
        <div class="flex items-center space-x-4">
          <div class="flex items-center bg-blue-50 px-3 py-2 rounded-md">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-blue-500 mr-1.5" viewBox="0 0 20 20" fill="currentColor">
              <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
              <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
            </svg>
            <span class="font-medium mr-1 text-blue-700">Attempted:</span>
            <span id="desktopQuestionsAttempted" class="font-bold text-blue-600">0</span>
          </div>
          <div class="flex items-center bg-green-50 px-3 py-2 rounded-md">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-green-500 mr-1.5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
            </svg>
            <span class="font-medium mr-1 text-green-700">Correct:</span>
            <span id="desktopQuestionsCorrect" class="font-bold text-green-600">0</span>
          </div>
          <div class="flex space-x-2">
            <a href="/statistics" class="flex items-center px-3 py-2 text-sm text-white bg-indigo-600 hover:bg-indigo-700 rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                <path d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z" />
              </svg>
              Stats
            </a>
            <button id="desktopResetProgress" class="flex items-center px-3 py-2 text-sm text-white bg-red-500 hover:bg-red-600 rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              Reset
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Desktop Navigation Row -->
    <div class="flex flex-row justify-between items-center space-x-4">
      <!-- Search Bar -->
      <div class="relative w-1/3">
        <SearchBar />
      </div>

      <!-- Question Selector Dropdown -->
      <div class="relative w-auto">
        <button id="desktopQuestionDropdownButton" class="w-auto flex items-center justify-center px-4 py-2 text-sm text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-colors">
          <span>Select Question</span>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </button>

        <div id="desktopQuestionDropdown" class="hidden absolute z-10 mt-1 w-64 bg-white rounded-lg shadow-md max-h-80 overflow-y-auto border border-gray-200">
          <ul id="desktopCategoryList" class="py-1 text-xs text-gray-700">
            {categoryMenu.map((category) => (
              <li class="desktop-category-item">
                <div class="px-3 py-1.5 font-medium bg-gray-50 hover:bg-gray-100 cursor-pointer flex justify-between items-center rounded-md my-1" data-category={category.code}>
                  <span>{category.title}</span>
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 desktop-category-icon" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                  </svg>
                </div>
                <ul class="desktop-subcategory-list hidden pl-2">
                  {category.subcategories.map((subcategory) => (
                    <li class="desktop-subcategory-item">
                      <div class="px-3 py-1.5 hover:bg-gray-100 cursor-pointer flex justify-between items-center rounded-md my-1" data-category={category.code} data-subcategory={subcategory.code}>
                        <span>{subcategory.title}</span>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 desktop-subcategory-icon" viewBox="0 0 20 20" fill="currentColor">
                          <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                      </div>
                      <ul class="desktop-question-list hidden pl-3">
                        {subcategory.questions.map((questionId) => (
                          <li class="px-3 py-1.5 hover:bg-gray-100 cursor-pointer desktop-question-item text-xs rounded-md my-1 mx-1" data-id={questionId}>
                            {questionId}
                          </li>
                        ))}
                      </ul>
                    </li>
                  ))}
                </ul>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  </div>
</nav>

<ResetConfirmationModal />

<script>
  import useQuizStore from '../stores/quizStore';

  // Client-side JavaScript for interactivity
  document.addEventListener('DOMContentLoaded', () => {
    // Mobile menu toggle
    const mobileMenuToggle = document.getElementById('mobileMenuToggle');
    const mobileMenu = document.getElementById('mobileMenu');

    mobileMenuToggle?.addEventListener('click', () => {
      mobileMenu?.classList.toggle('hidden');
    });

    // Mobile Question dropdown toggle
    const mobileQuestionDropdownButton = document.getElementById('mobileQuestionDropdownButton');
    const mobileQuestionDropdown = document.getElementById('mobileQuestionDropdown');

    mobileQuestionDropdownButton?.addEventListener('click', () => {
      mobileQuestionDropdown?.classList.toggle('hidden');
    });

    // Desktop Question dropdown toggle
    const desktopQuestionDropdownButton = document.getElementById('desktopQuestionDropdownButton');
    const desktopQuestionDropdown = document.getElementById('desktopQuestionDropdown');

    desktopQuestionDropdownButton?.addEventListener('click', () => {
      desktopQuestionDropdown?.classList.toggle('hidden');
    });

    // Close dropdowns when clicking outside
    document.addEventListener('click', (event) => {
      // Mobile dropdown
      if (mobileQuestionDropdownButton && mobileQuestionDropdown && 
          !mobileQuestionDropdownButton.contains(event.target as Node) && 
          !mobileQuestionDropdown.contains(event.target as Node)) {
        mobileQuestionDropdown.classList.add('hidden');
      }

      // Desktop dropdown
      if (desktopQuestionDropdownButton && desktopQuestionDropdown && 
          !desktopQuestionDropdownButton.contains(event.target as Node) && 
          !desktopQuestionDropdown.contains(event.target as Node)) {
        desktopQuestionDropdown.classList.add('hidden');
      }
    });

    // Handle mobile category toggle
    const mobileCategoryItems = document.querySelectorAll('.mobile-category-item > div');
    mobileCategoryItems.forEach(item => {
      item.addEventListener('click', (e) => {
        e.stopPropagation();
        const categoryItem = item.closest('.mobile-category-item');
        const subcategoryList = categoryItem?.querySelector('.mobile-subcategory-list');
        const categoryIcon = item.querySelector('.mobile-category-icon');

        // Toggle the subcategory list
        subcategoryList?.classList.toggle('hidden');

        // Rotate the icon when expanded
        if (categoryIcon) {
          categoryIcon.classList.toggle('transform');
          categoryIcon.classList.toggle('rotate-180');
        }
      });
    });

    // Handle desktop category toggle
    const desktopCategoryItems = document.querySelectorAll('.desktop-category-item > div');
    desktopCategoryItems.forEach(item => {
      item.addEventListener('click', (e) => {
        e.stopPropagation();
        const categoryItem = item.closest('.desktop-category-item');
        const subcategoryList = categoryItem?.querySelector('.desktop-subcategory-list');
        const categoryIcon = item.querySelector('.desktop-category-icon');

        // Toggle the subcategory list
        subcategoryList?.classList.toggle('hidden');

        // Rotate the icon when expanded
        if (categoryIcon) {
          categoryIcon.classList.toggle('transform');
          categoryIcon.classList.toggle('rotate-180');
        }
      });
    });

    // Handle mobile subcategory toggle
    const mobileSubcategoryItems = document.querySelectorAll('.mobile-subcategory-item > div');
    mobileSubcategoryItems.forEach(item => {
      item.addEventListener('click', (e) => {
        e.stopPropagation();
        const subcategoryItem = item.closest('.mobile-subcategory-item');
        const questionList = subcategoryItem?.querySelector('.mobile-question-list');
        const subcategoryIcon = item.querySelector('.mobile-subcategory-icon');

        // Toggle the question list
        questionList?.classList.toggle('hidden');

        // Rotate the icon when expanded
        if (subcategoryIcon) {
          subcategoryIcon.classList.toggle('transform');
          subcategoryIcon.classList.toggle('rotate-180');
        }
      });
    });

    // Handle desktop subcategory toggle
    const desktopSubcategoryItems = document.querySelectorAll('.desktop-subcategory-item > div');
    desktopSubcategoryItems.forEach(item => {
      item.addEventListener('click', (e) => {
        e.stopPropagation();
        const subcategoryItem = item.closest('.desktop-subcategory-item');
        const questionList = subcategoryItem?.querySelector('.desktop-question-list');
        const subcategoryIcon = item.querySelector('.desktop-subcategory-icon');

        // Toggle the question list
        questionList?.classList.toggle('hidden');

        // Rotate the icon when expanded
        if (subcategoryIcon) {
          subcategoryIcon.classList.toggle('transform');
          subcategoryIcon.classList.toggle('rotate-180');
        }
      });
    });

    // Handle question selection (both mobile and desktop)
    const allQuestionItems = document.querySelectorAll('.mobile-question-item, .desktop-question-item');
    allQuestionItems.forEach(item => {
      item.addEventListener('click', () => {
        const questionId = item.getAttribute('data-id');
        if (questionId) {
          // Navigate to the selected question
          window.location.href = `/quiz/${questionId}`;
        }
      });
    });

    // Search functionality
    const searchInputs = document.querySelectorAll('input[type="search"]');
    searchInputs.forEach(searchInput => {
      searchInput.addEventListener('input', () => {
        const searchTerm = searchInput.value.toLowerCase();
        const questionItems = document.querySelectorAll('.mobile-question-item, .desktop-question-item');

        questionItems.forEach(item => {
          const text = item.textContent?.toLowerCase() || '';
          if (text.includes(searchTerm)) {
            item.classList.remove('hidden');
          } else {
            item.classList.add('hidden');
          }
        });
      });
    });

    // Load user progress from Zustand store
    const mobileQuestionsAttempted = document.getElementById('mobileQuestionsAttempted');
    const mobileQuestionsCorrect = document.getElementById('mobileQuestionsCorrect');
    const desktopQuestionsAttempted = document.getElementById('desktopQuestionsAttempted');
    const desktopQuestionsCorrect = document.getElementById('desktopQuestionsCorrect');
    const mobileResetProgress = document.getElementById('mobileResetProgress');
    const desktopResetProgress = document.getElementById('desktopResetProgress');

    const updateProgressDisplay = () => {
      const { attemptedQuestions, correctlyAnsweredQuestions } = useQuizStore.getState();

      const attemptedCount = attemptedQuestions.length;
      const correctCount = correctlyAnsweredQuestions.length;

      // Update mobile counters
      if (mobileQuestionsAttempted) {
        mobileQuestionsAttempted.textContent = attemptedCount.toString();
      }
      if (mobileQuestionsCorrect) {
        mobileQuestionsCorrect.textContent = correctCount.toString();
      }

      // Update desktop counters
      if (desktopQuestionsAttempted) {
        desktopQuestionsAttempted.textContent = attemptedCount.toString();
      }
      if (desktopQuestionsCorrect) {
        desktopQuestionsCorrect.textContent = correctCount.toString();
      }
    };

    // Initialize progress display
    updateProgressDisplay();

    // Reset progress buttons
    const handleResetClick = () => {
      // Show the reset confirmation modal
      const resetConfirmationModal = document.getElementById('resetConfirmationModal');
      resetConfirmationModal?.classList.remove('hidden');
    };

    mobileResetProgress?.addEventListener('click', handleResetClick);
    desktopResetProgress?.addEventListener('click', handleResetClick);

    // Confirm reset button in the modal
    const confirmReset = document.getElementById('confirmReset');
    confirmReset?.addEventListener('click', () => {
      // Use the resetProgress action from the quiz store
      const { resetProgress } = useQuizStore.getState();
      resetProgress();

      // For backward compatibility
      localStorage.setItem('questionsAttempted', '0');
      localStorage.setItem('questionsCorrect', '0');

      updateProgressDisplay();

      // Hide the modal after resetting
      const resetConfirmationModal = document.getElementById('resetConfirmationModal');
      resetConfirmationModal?.classList.add('hidden');
    });

    // Subscribe to store changes to update the display
    const unsubscribe = useQuizStore.subscribe(
      (state) => [state.attemptedQuestions.length, state.correctlyAnsweredQuestions.length],
      () => {
        updateProgressDisplay();
      }
    );

    // Clean up subscription when the component is unmounted
    window.addEventListener('beforeunload', () => {
      unsubscribe();
    });
  });
</script>
