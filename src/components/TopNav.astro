---
import SearchBar from './SearchBar.astro';
import ResetConfirmationModal from './ResetConfirmationModal.astro';
import { getAllQuestions } from '../utils/questions';
import { parseQuestionId, createCategoryMenu, groupQuestionsByCategory } from '../utils/questionIdParser';
import type { Category } from '../types/categories';
import categoriesData from '../data/categories.json';

interface Props {
  questions?: Record<string, any>[];
}

// Get the questions from props
const { questions = [] } = Astro.props;

// Get all questions and organize them by category
const allQuestions = getAllQuestions();
const categories = categoriesData as Category[];
const questionGroups = groupQuestionsByCategory(allQuestions, categories);
const categoryMenu = createCategoryMenu(categories, questionGroups);
---

<nav class="bg-white shadow-md mb-4">
  <div class="max-w-4xl mx-auto px-4 py-2">
    <!-- Centered Title -->
    <div class="text-center mb-2">
      <a href="/" class="text-xl font-bold text-red-600 inline-block">Amateur Radio Exam Prep</a>
    </div>

    <!-- Mobile menu button -->
    <div class="flex justify-end md:hidden mb-2">
      <button id="menuToggle" class="p-1 rounded-md text-gray-600 hover:text-gray-900 focus:outline-none">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    </div>

    <!-- Navigation items - hidden on mobile unless toggled -->
    <div id="mobileMenu" class="hidden md:flex md:flex-row md:justify-between md:items-center md:space-x-4">
      <!-- Search Bar -->
      <div class="relative md:w-1/3">
        <SearchBar />
      </div>

      <!-- Question Selector Dropdown -->
      <div class="relative md:w-auto">
        <button id="questionDropdownButton" class="w-full md:w-auto flex items-center justify-center px-3 py-1.5 text-sm text-gray-700 bg-gray-100 rounded hover:bg-gray-200 focus:outline-none transition-colors">
          <span>Select Question</span>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </button>

        <div id="questionDropdown" class="hidden absolute z-10 mt-1 w-64 bg-white rounded shadow-lg max-h-80 overflow-y-auto border border-gray-200">
          <ul id="categoryList" class="py-1 text-xs text-gray-700">
            {categoryMenu.map((category) => (
              <li class="category-item">
                <div class="px-3 py-1.5 font-medium bg-gray-50 hover:bg-gray-100 cursor-pointer flex justify-between items-center" data-category={category.code}>
                  <span>{category.title}</span>
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 category-icon" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                  </svg>
                </div>
                <ul class="subcategory-list hidden pl-2">
                  {category.subcategories.map((subcategory) => (
                    <li class="subcategory-item">
                      <div class="px-3 py-1.5 hover:bg-gray-100 cursor-pointer flex justify-between items-center" data-category={category.code} data-subcategory={subcategory.code}>
                        <span>{subcategory.title}</span>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 subcategory-icon" viewBox="0 0 20 20" fill="currentColor">
                          <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                      </div>
                      <ul class="question-list hidden pl-3">
                        {subcategory.questions.map((questionId) => (
                          <li class="px-3 py-1 hover:bg-gray-100 cursor-pointer question-item text-xs" data-id={questionId}>
                            {questionId}
                          </li>
                        ))}
                      </ul>
                    </li>
                  ))}
                </ul>
              </li>
            ))}
          </ul>
        </div>
      </div>

      <!-- Stats Container -->
      <div class="md:w-auto">
        <!-- Combined User Status and Statistics -->
        <div class="bg-white px-2 py-1.5 rounded text-xs flex items-center space-x-3">
          <div class="flex items-center bg-blue-50 px-2 py-1 rounded">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 text-blue-500 mr-1" viewBox="0 0 20 20" fill="currentColor">
              <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
              <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
            </svg>
            <span class="font-medium mr-1 text-blue-700">Attempted:</span>
            <span id="questionsAttempted" class="font-bold text-blue-600">0</span>
          </div>
          <div class="flex items-center bg-green-50 px-2 py-1 rounded">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 text-green-500 mr-1" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
            </svg>
            <span class="font-medium mr-1 text-green-700">Correct:</span>
            <span id="questionsCorrect" class="font-bold text-green-600">0</span>
          </div>
          <div class="flex space-x-1">
            <a href="/statistics" class="flex items-center px-2 py-1 text-xs text-white bg-blue-500 hover:bg-blue-600 rounded transition-colors">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-0.5" viewBox="0 0 20 20" fill="currentColor">
                <path d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z" />
              </svg>
              Stats
            </a>
            <button id="resetProgress" class="flex items-center px-2 py-1 text-xs text-white bg-red-500 hover:bg-red-600 rounded transition-colors">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              Reset
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</nav>

<ResetConfirmationModal />

<script>
  import useQuizStore from '../stores/quizStore';

  // Client-side JavaScript for interactivity
  document.addEventListener('DOMContentLoaded', () => {
    // Mobile menu toggle
    const menuToggle = document.getElementById('menuToggle');
    const mobileMenu = document.getElementById('mobileMenu');

    menuToggle?.addEventListener('click', () => {
      mobileMenu?.classList.toggle('hidden');
    });

    // Question dropdown toggle
    const questionDropdownButton = document.getElementById('questionDropdownButton');
    const questionDropdown = document.getElementById('questionDropdown');

    questionDropdownButton?.addEventListener('click', () => {
      questionDropdown?.classList.toggle('hidden');
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (event) => {
      if (!questionDropdownButton?.contains(event.target as Node) && 
          !questionDropdown?.contains(event.target as Node)) {
        questionDropdown?.classList.add('hidden');
      }
    });

    // Handle category toggle
    const categoryItems = document.querySelectorAll('.category-item > div');
    categoryItems.forEach(item => {
      item.addEventListener('click', (e) => {
        e.stopPropagation();
        const categoryItem = item.closest('.category-item');
        const subcategoryList = categoryItem?.querySelector('.subcategory-list');
        const categoryIcon = item.querySelector('.category-icon');

        // Toggle the subcategory list
        subcategoryList?.classList.toggle('hidden');

        // Rotate the icon when expanded
        if (categoryIcon) {
          categoryIcon.classList.toggle('transform');
          categoryIcon.classList.toggle('rotate-180');
        }
      });
    });

    // Handle subcategory toggle
    const subcategoryItems = document.querySelectorAll('.subcategory-item > div');
    subcategoryItems.forEach(item => {
      item.addEventListener('click', (e) => {
        e.stopPropagation();
        const subcategoryItem = item.closest('.subcategory-item');
        const questionList = subcategoryItem?.querySelector('.question-list');
        const subcategoryIcon = item.querySelector('.subcategory-icon');

        // Toggle the question list
        questionList?.classList.toggle('hidden');

        // Rotate the icon when expanded
        if (subcategoryIcon) {
          subcategoryIcon.classList.toggle('transform');
          subcategoryIcon.classList.toggle('rotate-180');
        }
      });
    });

    // Handle question selection
    const questionItems = document.querySelectorAll('.question-item');
    questionItems.forEach(item => {
      item.addEventListener('click', () => {
        const questionId = item.getAttribute('data-id');
        if (questionId) {
          // Navigate to the selected question
          window.location.href = `/quiz/${questionId}`;
        }
      });
    });

    // Search functionality
    const searchInput = document.getElementById('searchInput') as HTMLInputElement;
    const questionList = document.getElementById('questionList');

    searchInput?.addEventListener('input', () => {
      const searchTerm = searchInput.value.toLowerCase();
      const questionItems = questionList?.querySelectorAll('li');

      questionItems?.forEach(item => {
        const text = item.textContent?.toLowerCase() || '';
        if (text.includes(searchTerm)) {
          item.classList.remove('hidden');
        } else {
          item.classList.add('hidden');
        }
      });
    });

    // Load user progress from Zustand store
    const questionsAttempted = document.getElementById('questionsAttempted');
    const questionsCorrect = document.getElementById('questionsCorrect');
    const resetProgress = document.getElementById('resetProgress');

    const updateProgressDisplay = () => {
      const { attemptedQuestions, correctlyAnsweredQuestions } = useQuizStore.getState();

      const attemptedCount = attemptedQuestions.length;
      const correctCount = correctlyAnsweredQuestions.length;

      if (questionsAttempted) {
        questionsAttempted.textContent = attemptedCount.toString();
      }
      if (questionsCorrect) {
        questionsCorrect.textContent = correctCount.toString();
      }
    };

    // Initialize progress display
    updateProgressDisplay();

    // Reset progress button
    resetProgress?.addEventListener('click', () => {
      // Show the reset confirmation modal
      const resetConfirmationModal = document.getElementById('resetConfirmationModal');
      resetConfirmationModal?.classList.remove('hidden');
    });

    // Confirm reset button in the modal
    const confirmReset = document.getElementById('confirmReset');
    confirmReset?.addEventListener('click', () => {
      // Use the resetProgress action from the quiz store
      const { resetProgress } = useQuizStore.getState();
      resetProgress();

      // For backward compatibility
      localStorage.setItem('questionsAttempted', '0');
      localStorage.setItem('questionsCorrect', '0');

      updateProgressDisplay();

      // Hide the modal after resetting
      const resetConfirmationModal = document.getElementById('resetConfirmationModal');
      resetConfirmationModal?.classList.add('hidden');
    });

    // Subscribe to store changes to update the display
    const unsubscribe = useQuizStore.subscribe(
      (state) => [state.attemptedQuestions.length, state.correctlyAnsweredQuestions.length],
      () => {
        updateProgressDisplay();
      }
    );

    // Clean up subscription when the component is unmounted
    window.addEventListener('beforeunload', () => {
      unsubscribe();
    });
  });
</script>
