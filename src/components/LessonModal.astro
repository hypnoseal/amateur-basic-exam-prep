---
// LessonModal.astro
// A client-side modal component for displaying lesson content

export interface Props {
  isOpen: boolean;
  onClose: () => void;
  content: any; // MDX content or rendered HTML
}

const { isOpen, onClose, content } = Astro.props;
---

{isOpen && (
  <div 
    id="lessonModal" 
    class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4 md:p-0"
  >
    <div 
      class="bg-white rounded-lg w-full max-w-2xl max-h-[90vh] overflow-y-auto flex flex-col"
    >
      <div class="sticky top-0 bg-white p-4 border-b flex justify-between items-center z-10">
        <h2 class="text-xl font-semibold">Lesson</h2>
        <button 
          id="closeModalBtn" 
          class="text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-300 rounded-full p-1"
          aria-label="Close"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <div class="p-4 overflow-y-auto">
        {content}
      </div>
    </div>
  </div>
)}

<script define:vars={{ onClose }}>
  // This script will run on the client
  const modal = document.getElementById('lessonModal');
  const closeBtn = document.getElementById('closeModalBtn');

  // Close modal when clicking the close button
  closeBtn?.addEventListener('click', () => {
    onClose();
  });

  // Close modal when clicking outside the content
  modal?.addEventListener('click', (event) => {
    if (event.target === modal) {
      onClose();
    }
  });

  // Close modal when pressing Escape key
  document.addEventListener('keydown', (event) => {
    if (event.key === 'Escape' && modal) {
      onClose();
    }
  });
</script>
