---
import Layout from '../components/Layout.astro';
import TopNav from '../components/TopNav.astro';

// Pre-generated statistics data will be fetched client-side
---

<Layout title="Statistics Dashboard - Amateur Radio Exam Prep">
	<TopNav />

	<div class="max-w-6xl mx-auto px-4 py-8">
		<div class="flex justify-between items-center mb-6">
			<h1 class="text-3xl font-bold text-gray-800">Your Performance Statistics</h1>
			<button id="backButton" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
				Go Back to Question
			</button>
		</div>

		<div class="bg-white rounded-lg shadow-md p-6 mb-8">
			<h2 class="text-xl font-semibold text-gray-700 mb-4">Overall Progress</h2>
			<div class="grid grid-cols-1 md:grid-cols-3 gap-6">
				<div class="bg-indigo-50 rounded-lg p-4 text-center">
					<p class="text-sm text-indigo-600 font-medium">Questions Attempted</p>
					<p class="text-3xl font-bold text-indigo-800" id="totalAttempted">0</p>
					<p class="text-sm text-gray-500" id="totalAttemptedPercent">0%</p>
				</div>
				<div class="bg-green-50 rounded-lg p-4 text-center">
					<p class="text-sm text-green-600 font-medium">Correctly Answered</p>
					<p class="text-3xl font-bold text-green-800" id="totalCorrect">0</p>
					<p class="text-sm text-gray-500" id="totalCorrectPercent">0%</p>
				</div>
				<div class="bg-blue-50 rounded-lg p-4 text-center">
					<p class="text-sm text-blue-600 font-medium">Success Rate</p>
					<p class="text-3xl font-bold text-blue-800" id="successRate">0%</p>
					<div class="w-full bg-gray-200 rounded-full h-2.5 mt-2">
						<div class="bg-blue-600 h-2.5 rounded-full" id="successRateBar" style="width: 0%"></div>
					</div>
				</div>
			</div>
		</div>

		<div class="bg-white rounded-lg shadow-md p-6 mb-8">
			<h2 class="text-xl font-semibold text-gray-700 mb-4">Performance by Category</h2>
			<div class="overflow-x-auto">
				<table class="min-w-full divide-y divide-gray-200">
					<thead class="bg-gray-50">
						<tr>
							<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
							<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Attempted</th>
							<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Correct</th>
							<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Success Rate</th>
							<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Progress</th>
						</tr>
					</thead>
					<tbody class="bg-white divide-y divide-gray-200" id="categoryStats">
						<!-- Category stats will be populated by JavaScript -->
					</tbody>
				</table>
			</div>
		</div>

		<div class="bg-white rounded-lg shadow-md p-6 mb-8">
			<h2 class="text-xl font-semibold text-gray-700 mb-4">Areas for Improvement</h2>
			<div id="improvementAreas" class="space-y-4">
				<!-- Areas for improvement will be populated by JavaScript -->
				<p class="text-gray-500 italic">Complete more questions to see areas that need improvement.</p>
			</div>
		</div>

		<div class="flex justify-center mt-8">
			<button id="backButtonBottom" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
				Go Back to Question
			</button>
		</div>
	</div>
</Layout>

<script>
	import useQuizStore from '../stores/quizStore';
	import { parseQuestionId } from '../utils/questionIdParser';
	import categories from '../data/categories.json';

	// Define types for our statistics
	interface CategoryStats {
		title: string;
		attempted: number;
		correct: number;
		total: number;
	}

	type CategoryStatsMap = {
		[key: string]: CategoryStats;
	};

	// Interface for pre-generated statistics data
	interface StatisticsData {
		totalQuestions: number;
		categories: {
			code: string;
			title: string;
			questionCount: number;
		}[];
	}

	document.addEventListener('DOMContentLoaded', async () => {
		// Set up back button functionality
		const backButton = document.getElementById('backButton');
		const backButtonBottom = document.getElementById('backButtonBottom');

		// Add click event listeners to both buttons
		if (backButton) {
			backButton.addEventListener('click', () => {
				window.history.back();
			});
		}

		if (backButtonBottom) {
			backButtonBottom.addEventListener('click', () => {
				window.history.back();
			});
		}

		// Fetch pre-generated statistics data
		let statisticsData: StatisticsData;
		try {
			const response = await fetch('/data/statistics.json');
			if (!response.ok) {
				throw new Error(`Failed to fetch statistics data: ${response.status}`);
			}
			statisticsData = await response.json();
		} catch (error) {
			console.error('Error fetching statistics data:', error);
			return;
		}

		const totalQuestions = statisticsData.totalQuestions;

		// Get user data from the store
		const { attemptedQuestions, correctlyAnsweredQuestions } = useQuizStore.getState();

		// Update overall stats
		const totalAttempted = attemptedQuestions.length;
		const totalCorrect = correctlyAnsweredQuestions.length;
		const successRateValue = totalAttempted > 0 ? Math.round((totalCorrect / totalAttempted) * 100) : 0;

		const totalAttemptedEl = document.getElementById('totalAttempted');
		const totalAttemptedPercentEl = document.getElementById('totalAttemptedPercent');
		const totalCorrectEl = document.getElementById('totalCorrect');
		const totalCorrectPercentEl = document.getElementById('totalCorrectPercent');
		const successRateEl = document.getElementById('successRate');
		const successRateBarEl = document.getElementById('successRateBar');

		if (totalAttemptedEl) totalAttemptedEl.textContent = totalAttempted.toString();
		if (totalAttemptedPercentEl) totalAttemptedPercentEl.textContent = 
			`${Math.round((totalAttempted / totalQuestions) * 100)}% of all questions`;

		if (totalCorrectEl) totalCorrectEl.textContent = totalCorrect.toString();
		if (totalCorrectPercentEl) totalCorrectPercentEl.textContent = 
			`${Math.round((totalCorrect / totalQuestions) * 100)}% of all questions`;

		if (successRateEl) successRateEl.textContent = `${successRateValue}%`;
		if (successRateBarEl) successRateBarEl.style.width = `${successRateValue}%`;

		// Initialize category stats using pre-generated data
		const categoryStats: CategoryStatsMap = {};

		statisticsData.categories.forEach(category => {
			categoryStats[category.code] = {
				title: category.title,
				attempted: 0,
				correct: 0,
				total: category.questionCount
			};
		});

		// Process attempted and correct questions (user-specific data)
		attemptedQuestions.forEach((questionId: string) => {
			const parsed = parseQuestionId(questionId);
			if (parsed) {
				const { categoryCode } = parsed;
				if (categoryCode && categoryStats[categoryCode]) {
					categoryStats[categoryCode].attempted++;
				}
			}
		});

		correctlyAnsweredQuestions.forEach((questionId: string) => {
			const parsed = parseQuestionId(questionId);
			if (parsed) {
				const { categoryCode } = parsed;
				if (categoryCode && categoryStats[categoryCode]) {
					categoryStats[categoryCode].correct++;
				}
			}
		});

		// Populate category stats table
		const categoryStatsElement = document.getElementById('categoryStats');
		if (categoryStatsElement) {
			categoryStatsElement.innerHTML = '';

			Object.entries(categoryStats).forEach(([code, stats]: [string, CategoryStats]) => {
				const successRate = stats.attempted > 0 ? Math.round((stats.correct / stats.attempted) * 100) : 0;
				const progressPercent = Math.round((stats.attempted / stats.total) * 100);

				const row = document.createElement('tr');
				row.innerHTML = `
					<td class="px-6 py-4 whitespace-nowrap">
						<div class="text-sm font-medium text-gray-900">${stats.title}</div>
						<div class="text-sm text-gray-500">Code: ${code}</div>
					</td>
					<td class="px-6 py-4 whitespace-nowrap">
						<div class="text-sm text-gray-900">${stats.attempted} / ${stats.total}</div>
						<div class="text-sm text-gray-500">${progressPercent}%</div>
					</td>
					<td class="px-6 py-4 whitespace-nowrap">
						<div class="text-sm text-gray-900">${stats.correct} / ${stats.total}</div>
						<div class="text-sm text-gray-500">${Math.round((stats.correct / stats.total) * 100)}%</div>
					</td>
					<td class="px-6 py-4 whitespace-nowrap">
						<div class="text-sm text-gray-900">${successRate}%</div>
					</td>
					<td class="px-6 py-4 whitespace-nowrap">
						<div class="w-full bg-gray-200 rounded-full h-2.5">
							<div class="bg-indigo-600 h-2.5 rounded-full" style="width: ${progressPercent}%"></div>
						</div>
					</td>
				`;

				categoryStatsElement.appendChild(row);
			});
		}

		// Identify areas for improvement
		const improvementAreas = document.getElementById('improvementAreas');
		if (improvementAreas && totalAttempted > 0) {
			// Clear default message
			improvementAreas.innerHTML = '';

			// Find categories with below-average success rates
			const averageSuccessRate = successRateValue;
			const weakCategories = Object.entries(categoryStats)
				.filter(([_, stats]: [string, CategoryStats]) => stats.attempted > 0 && (stats.correct / stats.attempted) * 100 < averageSuccessRate)
				.sort((a: [string, CategoryStats], b: [string, CategoryStats]) => (a[1].correct / a[1].attempted) - (b[1].correct / b[1].attempted));

			if (weakCategories.length > 0) {
				weakCategories.slice(0, 3).forEach(([code, stats]: [string, CategoryStats]) => {
					const categorySuccessRate = stats.attempted > 0 ? Math.round((stats.correct / stats.attempted) * 100) : 0;

					const category = categories.find(c => c.code === code);
					if (category) {
						const div = document.createElement('div');
						div.className = 'bg-red-50 rounded-lg p-4';
						div.innerHTML = `
							<h3 class="font-medium text-red-800">${category.title}</h3>
							<p class="text-sm text-gray-600 mt-1">Success rate: ${categorySuccessRate}% (${stats.correct}/${stats.attempted})</p>
							<p class="text-sm text-gray-600 mt-1">Focus on improving your knowledge in this area.</p>
							<a href="/quiz" class="inline-block mt-2 text-sm text-indigo-600 hover:text-indigo-800">Practice questions in this category</a>
						`;
						improvementAreas.appendChild(div);
					}
				});
			} else {
				const div = document.createElement('div');
				div.className = 'bg-green-50 rounded-lg p-4';
				div.innerHTML = `
					<h3 class="font-medium text-green-800">Great job!</h3>
					<p class="text-sm text-gray-600 mt-1">You're performing well across all categories. Keep practicing to maintain your knowledge.</p>
				`;
				improvementAreas.appendChild(div);
			}
		}
	});
</script>
