---
import Layout from '../../components/Layout.astro';
import TopNav from '../../components/TopNav.astro';
import LessonContent from '../../components/LessonContent.jsx';
import QuizCard from '../../components/QuizCard.jsx';
import { questionFiles, getAllQuestions, getQuestionById } from '../../utils/questions';

// Generate paths for all questions
export async function getStaticPaths() {
  return Object.values(questionFiles).map(file => {
    const typedFile = file as { frontmatter: { id: string } };
    return {
      params: { id: typedFile.frontmatter.id },
      props: { questionId: typedFile.frontmatter.id }
    };
  });
}

// Get the question data from the props
const { questionId } = Astro.props;
const questionData = getQuestionById(questionId);

if (!questionData) {
  return Astro.redirect('/quiz');
}

const { id, question, answers, Content } = questionData;

// For TopNav, we need all questions
const allQuestions = getAllQuestions();
---

<Layout title="Quiz - Amateur Radio Exam Prep">
  <TopNav questions={allQuestions} />

  <div id="quizContainer" class="flex justify-center">
    <div class="w-full max-w-2xl">
      <QuizCard 
        client:load
        id={id}
        question={question}
        answers={answers}
        onShowLesson={(questionId) => {
          // This function will be called from the React component
          // but we need to use client:only to make it work
        }}
      />

      <!-- LessonContent component will be client-side hydrated -->
      <LessonContent 
        client:only="react"
        isOpen={false}
        onClose={() => {}}
        content={null}
      />
    </div>
  </div>

  <!-- Hidden element to store lesson content for the current question -->
  <div id={`lesson-${id}`} class="hidden">
    <Content />
  </div>
</Layout>

<script>
  // Set up the interaction between QuizCard and LessonModal
  document.addEventListener('DOMContentLoaded', () => {
    // Listen for the custom event from the QuizCard component
    document.addEventListener('showLesson', (event) => {
      const detail = (event as CustomEvent<{ questionId: string }>).detail;
      const questionId = detail.questionId;

      // Find the lesson content for this question
      const lessonElement = document.getElementById(`lesson-${questionId}`);

      if (lessonElement) {
        // Clone the lesson content to avoid removing it from its original location
        const lessonContentClone = lessonElement.cloneNode(true) as HTMLElement;

        // Show the cloned content (it was hidden in the original)
        lessonContentClone.classList.remove('hidden');

        // Dispatch a custom event to display the lesson content
        document.dispatchEvent(new CustomEvent('react-open-lesson-content', {
          detail: {
            content: lessonContentClone
          }
        }));
      } else {
        console.error(`Lesson content not found for question ${questionId}`);
      }
    });
  });
</script>
